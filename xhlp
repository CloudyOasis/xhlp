#!/usr/bin/bash

((recursive=0))
((strict=0))
# only valid if it contains only one character *after flag check*
mode=''
filelist=''

usage() {
	echo 'xhlp : automatically compile marked files on demand, or delete results.'
	echo '    simply add "!xhlp marker" in your file to mark them for compilation.'
	echo '    xhlp will create ./.xhlp to know what to remove later.'
	echo 'DISCLAIMER : this is a quick, homemade script, which is *not* supported in any way.'
	echo 'available flags :'
	echo '-c : compile marked files'
	echo '-C : clear files listed in .xhlp'
	echo '    -c or -C must be used (but not both) for xhlp to work'
	echo '-f : filelist ; please provide a filelist to use instead of marker/.xhlp detection.'
	echo '    with this option, files cannot begin with a dash, contain spaces, and paths must be relative.'
	echo '-r : recurse through subdirectories'
	echo '-s : strict, affects output and return value but does not change behaviour'
	echo '-h : display this message'
}

writeDotfile() {
	# overwrite the previous file as it's not needed anymore
	echo '# .xhlp : this auto-generated file contains a list of executables compiled with xhlp.' > .xhlp
	echo '# these executables are listed here as to be easily removable by this tool.' >> .xhlp
	echo '# the first 15 lines of this file are reserved for comments (stable across versions),' >> .xhlp
	echo '# so you can simply grab the list using `tail -n +16` :)' >> .xhlp
	echo '# this file must contain relative paths only !' >> .xhlp
	echo '# for more info, please check the repo (https://github.com/CloudyOasis/xhlp),' >> .xhlp
	echo '# or find me elsewhere under the name cloudy oasis (e.g. u/cloudy_oasis) if the link is dead' >> .xhlp
	printf '\n\n\n\n\n\n\n\n' >> .xhlp
	echo "$*" >> .xhlp
}

if [[ $* = *"--help"* ]]; then
	usage
	exit 0
fi

while getopts 'cCfrsh' flag; do
	case ${flag} in
		c) mode+='c' ;;
		C) mode+='C' ;;
		f)
			filelist=''
			for word in $*; do
				if [ ${word:0:1} != '-' ]; then
					filelist+=$(printf "$word\n")
				fi
			done
		;;
		r) ((recursive=1)) ;;
		s) ((strict=1)) ;;
		h)
			usage
			exit 0
		;;
	esac
done

if (( ${#mode} != 1 )); then
	echo "invalid mode (select either -c to compile or -C to clean), exiting." >> /dev/stderr
	exit 1
fi

# compilation mode
if [ $mode = 'c' ]; then
	if [ -z "$filelist" ]; then
		filelist=$(rg $(if (( $recursive == 0 )); then echo "--max-depth 1"; fi) -l '!xhlp marker' $(pwd))
		# should ripgrep not return paths relative to $(pwd), replace the previous line by the following :
		# filelist=$( \
		# 	for file in $(rg \
		# 		$(if (( $recursive == 0 )); then echo "--max-depth 1"; fi) \
		# 		-l '!xhlp marker' $(pwd) \
		# 	); do
		# 		realpath --relative-to=$(pwd) $file
		# 	done \
		# )
	fi

	writeDotfile

	# process count
	((count=0))

	for file in $filelist; do
		((processed=1))
		destinationFile=${file%.*} # file without extension, change to whatever you want
		case ${file#*.} in # case extension in
			c)
				(gcc -std=c17 $file -lm -o $destinationFile) &
			;;
			cpp)
				(g++-11 -std=c++20 $file -o $destinationFile) &
			;;
			*) ((processed=0));;
		esac

		if (( $processed != 0 )); then
			# keep track of processes to wait for them later
			processes+="$! "
			((count+=1))
			echo "$(realpath --relative-to=$(pwd) $destinationFile)" >> .xhlp
		else
			if (( $strict != 0 )); then
				echo "warning : $file not processed" > /dev/stderr
			fi
		fi
	done

	if (( $count == 0 )); then
		if (( $strict != 0 )); then
			echo 'no input files found.' > /dev/stderr
		fi
		exit 1
	fi

	echo "$count compilation processes started, waiting for them to finish..."
	
	wait

	echo 'done !'
	exit 0
fi

# cleaning mode
if [ $mode = 'C' ]; then
	if [ -z "$filelist" ]; then
		if [ ! -f '.xhlp' ]; then
			echo '.xhlp file not found, exiting'
			exit $strict # only exit 1 if strict
		fi

		if (( $recursive == 1 )); then
			filelist=$(tail .xhlp -n +16)
			rm .xhlp # we just removed all files contained in it, so we can remove it
		else
			# grep if in working directory
			filelist=$(tail .xhlp -n +16 | grep -v '/')
			unused=$(tail .xhlp -n +16 | grep '/')
			
			# if there are unused files, make a new dotfile ; otherwise, delete it
			if (( $(echo $unused | wc -l) != 0 )); then
				writeDotfile $unused
			else
				rm .xhlp
			fi
		fi
	fi

	if (( $strict == 0 )); then
		rm $filelist 2> /dev/null
	else
		rm $filelist
	fi

	echo 'done !'
	exit 0
fi

